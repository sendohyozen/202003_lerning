# 用来存放一个0或者1的位置，就是计算机中最小的储存单位，叫做【位】，外国名字叫【bit】，也叫做【比特】。
# 我们规定8个比特构成一个【字节】（byte），字节是计算机里最常用的单位。
# 你可别混了，bit是位，byte是字节，1byte = 8bit。

# 我们千兆宽带，其实说的是以比特每秒位单位，1000M就是 1000Mbit/s。
# 而我们下载速度是以字节每秒位单位显示的，1byte = 8bit。
# 那么：1000M bit = 125M byte。
# 也就是说千兆宽带，每秒下载速度最多125M。那我们的百兆宽带，下载速度也就只有十几兆了。
# 1kB，1MB，1GB，都是字节 1B=8bit

# 计算机这种东西最早由老外发明，外国人使用的英语只有26个字母，再加上标点、数字和一些符号也不会太多，老外搞出来一个东西叫做ASCII码，这个比二进制高级了一些。
# ASCII码组合出的256种状态，至此一个字节就使用满了。

# 我们科学家就重新编写了一张编码表，叫做GB2312（word中有这种编码方式），它使用2个字节16个比特位，来表示绝大多数（65535）个汉字。
# 后来，为了显示更多的汉字，又研究出一套编码，GBK编码。

# 那么，为了能够让全世界人民都能畅通的交流。Unicode应运而生。Unicode把所有语言都统一到一套编码里，可以容纳100多万个符号，这样就不会再有乱码问题了。
# 好开森，可以畅通无阻的沟通了。但是由于把所有语言都统一到一套编码里中，就造成Unicode码越来越庞大。比如英文A，之前可以用00010001表示，但是到了Unicode码中，必须使用00000000 00010001来表示。

# 于是，科学家们又针对Unicode码研究出了一种可变长度字符编码，叫做UTF-8（8-bit Unicode Transformation Format），它可以根据不同的符号来变化字节长度。
print('开课吧'.encode('gbk'))
print('开课吧'.encode('utf-8'))
print(b'\xbf\xaa\xbf\xce\xb0\xc9'.decode('gbk'))
print(b'\xe5\xbc\x80\xe8\xaf\xbe\xe5\x90\xa7'.decode('utf-8'))

# 这里的计算机语言有一个相同之处，就是最前面都有一个字母‘b’，这是代表它是bytes(字节)类型的数据。
print(type('开课吧'))
print(type(b'\xbf\xaa\xbf\xce\xb0\xc9'))
print(type(b'\xe5\xbc\x80\xe8\xaf\xbe\xe5\x90\xa7'))
# 计算机的编码，就是把字符串类型的数据，转换成bytes类型的数据。
# 计算机的解码，就是把bytes类型的数据，转换成字符串类型的数据。
# 江湖秘籍：编码时用什么样的编码表，解码的时候就用什么样的编码表

# 文件读写

# 读取文件
# 文件读取很简单，就三步。打开，读，关闭
# 第一步打开文件：第一个r是固定符号。 'test.txt'是需要读取文件的文件名,在这里, readfile.py文件与test.txt文件需要放在同一文件夹内。最后一个‘r’是文件打开模式，‘r’代表read, 意为文件读取。
myfile = open(r'test.txt','r')
# 第二步，我们要来读取文件中的内容。就是使用read()函数，读取myfile变量中文件的数据，将数据放在myfilecontent变量中。
myfilecontent = myfile.read()
# 之后使用print()函数，看看读取到什么内容。
print(myfilecontent)
# 最后一步，关闭文件。
myfile.close()


# 写入文件
# 文件写入也是分三步。打开，写，关闭
# 第一步打开文件：还是使用open()函数， 除了最后一个参数，其余参数不动， 把最后一个参数换成‘w’，是write意思，意为写入。
myfile = open(r'test1.txt','w')
# 第二步，开始写入内容
myfile.write('从你的全世界路过')
# 第三步，关闭文件
myfile.close()

# 你会发现，原来的” 愿你出走半生归来仍是少年”内容已经消失。
# 因为‘w’是写入模式，会直接清空test1.txt文件中的内容，重新写入。 如果你不想清空原来内容， 就要使用‘a’模式，意为追加。

# 如果我们想写入的数据不是文本，而是图片怎么办？
# 我们可以看到里面还有‘wb’模式， 它的意思是以二进制的方式打开一个文件用于写入。
# 图片、音频都是以二进制形式存在，所以使用wb模式就好了。后期我们还会遇到。

# 顺便再说一下，好多粗心的小伙伴，在打开文件，读写结束后，忘记关闭文件。但是不关闭文件就会占用电脑内存，使得电脑越来越慢，怎么解决呢？
# 我们可以使用with方法
with open(r'test.txt','a') as myfile:
    myfile.write('你好')